/*
    disturbanceBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    disturbanceBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with disturbanceBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_bayes_estimator_binomial_trend_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bayes_estimator_binomial_trend");
    reader.add_event(44, 44, "end", "model_bayes_estimator_binomial_trend");
    return reader;
}

#include <meta_header.hpp>
 class model_bayes_estimator_binomial_trend : public prob_grad {
private:
    int N;
    vector<int> K;
    vector<int> y;
    vector<int> time;
    int length_pred;
    vector<int> time_pred;
public:
    model_bayes_estimator_binomial_trend(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_bayes_estimator_binomial_trend(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_bayes_estimator_binomial_trend_namespace::model_bayes_estimator_binomial_trend";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("K", "N", N);
            context__.validate_dims("data initialization", "K", "int", context__.to_vec(N));
            validate_non_negative_index("K", "N", N);
            K = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            size_t K_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < K_limit_0__; ++i_0__) {
                K[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "int", context__.to_vec(N));
            validate_non_negative_index("time", "N", N);
            time = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("time");
            pos__ = 0;
            size_t time_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
                time[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "length_pred", "int", context__.to_vec());
            length_pred = int(0);
            vals_i__ = context__.vals_i("length_pred");
            pos__ = 0;
            length_pred = vals_i__[pos__++];
            current_statement_begin__ = 10;
            validate_non_negative_index("time_pred", "length_pred", length_pred);
            context__.validate_dims("data initialization", "time_pred", "int", context__.to_vec(length_pred));
            validate_non_negative_index("time_pred", "length_pred", length_pred);
            time_pred = std::vector<int>(length_pred,int(0));
            vals_i__ = context__.vals_i("time_pred");
            pos__ = 0;
            size_t time_pred_limit_0__ = length_pred;
            for (size_t i_0__ = 0; i_0__ < time_pred_limit_0__; ++i_0__) {
                time_pred[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 6;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"K[k0__]",K[k0__],0);
            }
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            }
            current_statement_begin__ = 8;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"time[k0__]",time[k0__],0);
            }
            current_statement_begin__ = 9;
            check_greater_or_equal(function__,"length_pred",length_pred,0);
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < length_pred; ++k0__) {
                check_greater_or_equal(function__,"time_pred[k0__]",time_pred[k0__],0);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            ++num_params_r__;
            current_statement_begin__ = 15;
            ++num_params_r__;
            current_statement_begin__ = 16;
            ++num_params_r__;
            current_statement_begin__ = 17;
            validate_non_negative_index("alpha_std", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_bayes_estimator_binomial_trend() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("trend")))
            throw std::runtime_error("variable trend missing");
        vals_r__ = context__.vals_r("trend");
        pos__ = 0U;
        context__.validate_dims("initialization", "trend", "double", context__.to_vec());
        double trend(0);
        trend = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(trend);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable trend: ") + e.what());
        }

        if (!(context__.contains_r("intercept")))
            throw std::runtime_error("variable intercept missing");
        vals_r__ = context__.vals_r("intercept");
        pos__ = 0U;
        context__.validate_dims("initialization", "intercept", "double", context__.to_vec());
        double intercept(0);
        intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(intercept);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable intercept: ") + e.what());
        }

        if (!(context__.contains_r("alpha_std")))
            throw std::runtime_error("variable alpha_std missing");
        vals_r__ = context__.vals_r("alpha_std");
        pos__ = 0U;
        validate_non_negative_index("alpha_std", "N", N);
        context__.validate_dims("initialization", "alpha_std", "vector_d", context__.to_vec(N));
        vector_d alpha_std(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            alpha_std(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(alpha_std);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha_std: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            T__ trend;
            (void) trend;  // dummy to suppress unused var warning
            if (jacobian__)
                trend = in__.scalar_constrain(lp__);
            else
                trend = in__.scalar_constrain();

            T__ intercept;
            (void) intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                intercept = in__.scalar_constrain(lp__);
            else
                intercept = in__.scalar_constrain();

            Eigen::Matrix<T__,Eigen::Dynamic,1>  alpha_std;
            (void) alpha_std;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_std = in__.vector_constrain(N,lp__);
            else
                alpha_std = in__.vector_constrain(N);


            // transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(N));
            (void) mu;  // dummy to suppress unused var warning

            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu,DUMMY_VAR__);


            current_statement_begin__ = 22;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 23;
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), (intercept + (trend * get_base1(time,i,"time",1))));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(mu(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 21;

            // model body

            current_statement_begin__ = 27;
            lp_accum__.add(student_t_log<propto__>(trend, 5, 0, 0.10000000000000001));
            current_statement_begin__ = 28;
            lp_accum__.add(normal_log<propto__>(intercept, -(6), 1));
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 30;
            lp_accum__.add(normal_log<propto__>(alpha_std, 0, 1));
            current_statement_begin__ = 32;
            lp_accum__.add(binomial_logit_log<propto__>(y, K, add(mu,multiply(sigma,alpha_std))));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma");
        names__.push_back("trend");
        names__.push_back("intercept");
        names__.push_back("alpha_std");
        names__.push_back("mu");
        names__.push_back("theta");
        names__.push_back("trend_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(length_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_bayes_estimator_binomial_trend_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma = in__.scalar_lb_constrain(0);
        double trend = in__.scalar_constrain();
        double intercept = in__.scalar_constrain();
        vector_d alpha_std = in__.vector_constrain(N);
        vars__.push_back(sigma);
        vars__.push_back(trend);
        vars__.push_back(intercept);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(alpha_std[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 21;
            validate_non_negative_index("mu", "N", N);
            vector_d mu(static_cast<Eigen::VectorXd::Index>(N));
            (void) mu;  // dummy to suppress unused var warning

            stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(mu,DUMMY_VAR__);


            current_statement_begin__ = 22;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 23;
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), (intercept + (trend * get_base1(time,i,"time",1))));
            }

            // validate transformed parameters
            current_statement_begin__ = 21;

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(mu[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 36;
            validate_non_negative_index("theta", "N", N);
            vector_d theta(static_cast<Eigen::VectorXd::Index>(N));
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta,DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("trend_pred", "length_pred", length_pred);
            vector_d trend_pred(static_cast<Eigen::VectorXd::Index>(length_pred));
            (void) trend_pred;  // dummy to suppress unused var warning

            stan::math::initialize(trend_pred, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(trend_pred,DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("log_lik", "N", N);
            vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(log_lik,DUMMY_VAR__);


            current_statement_begin__ = 39;
            stan::math::assign(theta, inv_logit(add(mu,multiply(sigma,alpha_std))));
            current_statement_begin__ = 40;
            for (int i = 1; i <= length_pred; ++i) {
                current_statement_begin__ = 41;
                stan::math::assign(get_base1_lhs(trend_pred,i,"trend_pred",1), inv_logit((intercept + (trend * get_base1(time_pred,i,"time_pred",1)))));
            }
            current_statement_begin__ = 42;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 43;
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), binomial_logit_log(get_base1(y,i,"y",1),get_base1(K,i,"K",1),add(mu,multiply(sigma,alpha_std))));
            }

            // validate generated quantities
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;
            current_statement_begin__ = 38;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < length_pred; ++k_0__) {
            vars__.push_back(trend_pred[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_bayes_estimator_binomial_trend";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "trend";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_std" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= length_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "trend";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_std" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= length_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_bayes_estimator_binomial_trend_namespace::model_bayes_estimator_binomial_trend stan_model;


#endif
