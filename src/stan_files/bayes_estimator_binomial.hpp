/*
    disturbanceBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    disturbanceBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with disturbanceBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_bayes_estimator_binomial_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bayes_estimator_binomial");
    reader.add_event(79, 79, "end", "model_bayes_estimator_binomial");
    return reader;
}

#include <meta_header.hpp>
 class model_bayes_estimator_binomial : public prob_grad {
private:
    int N;
    vector<int> K;
    vector<int> y;
    double min_y;
    double max_y;
    double mean_y;
    double sd_y;
public:
    model_bayes_estimator_binomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_bayes_estimator_binomial(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_bayes_estimator_binomial_namespace::model_bayes_estimator_binomial";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("K", "N", N);
            context__.validate_dims("data initialization", "K", "int", context__.to_vec(N));
            validate_non_negative_index("K", "N", N);
            K = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            size_t K_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < K_limit_0__; ++i_0__) {
                K[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 6;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"K[k0__]",K[k0__],0);
            }
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            }
            // initialize data variables
            current_statement_begin__ = 14;
            min_y = double(0);
            stan::math::fill(min_y,DUMMY_VAR__);
            current_statement_begin__ = 15;
            max_y = double(0);
            stan::math::fill(max_y,DUMMY_VAR__);
            current_statement_begin__ = 16;
            mean_y = double(0);
            stan::math::fill(mean_y,DUMMY_VAR__);
            current_statement_begin__ = 17;
            sd_y = double(0);
            stan::math::fill(sd_y,DUMMY_VAR__);

            current_statement_begin__ = 19;
            stan::math::assign(min_y, min(y));
            current_statement_begin__ = 20;
            stan::math::assign(max_y, max(y));
            current_statement_begin__ = 21;
            stan::math::assign(mean_y, mean(to_vector(y)));
            current_statement_begin__ = 22;
            stan::math::assign(sd_y, sd(to_vector(y)));

            // validate transformed data
            current_statement_begin__ = 14;
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 26;
            ++num_params_r__;
            current_statement_begin__ = 27;
            ++num_params_r__;
            current_statement_begin__ = 28;
            validate_non_negative_index("alpha_std", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_bayes_estimator_binomial() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("alpha_std")))
            throw std::runtime_error("variable alpha_std missing");
        vals_r__ = context__.vals_r("alpha_std");
        pos__ = 0U;
        validate_non_negative_index("alpha_std", "N", N);
        context__.validate_dims("initialization", "alpha_std", "vector_d", context__.to_vec(N));
        vector_d alpha_std(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            alpha_std(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(alpha_std);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha_std: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();

            T__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  alpha_std;
            (void) alpha_std;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_std = in__.vector_constrain(N,lp__);
            else
                alpha_std = in__.vector_constrain(N);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(mu, 1, 1));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 35;
            lp_accum__.add(normal_log<propto__>(alpha_std, 0, 1));
            current_statement_begin__ = 37;
            lp_accum__.add(binomial_logit_log<propto__>(y, K, add(mu,multiply(sigma,alpha_std))));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("sigma");
        names__.push_back("alpha_std");
        names__.push_back("theta");
        names__.push_back("log_lik");
        names__.push_back("y_rep");
        names__.push_back("y_pop_rep");
        names__.push_back("min_y_rep");
        names__.push_back("max_y_rep");
        names__.push_back("mean_y_rep");
        names__.push_back("sd_y_rep");
        names__.push_back("p_min");
        names__.push_back("p_max");
        names__.push_back("p_mean");
        names__.push_back("p_sd");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_bayes_estimator_binomial_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu = in__.scalar_constrain();
        double sigma = in__.scalar_lb_constrain(0);
        vector_d alpha_std = in__.vector_constrain(N);
        vars__.push_back(mu);
        vars__.push_back(sigma);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(alpha_std[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 42;
            validate_non_negative_index("theta", "N", N);
            vector_d theta(static_cast<Eigen::VectorXd::Index>(N));
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta,DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("log_lik", "N", N);
            vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("y_rep", "N", N);
            vector<int> y_rep(N, 0);
            stan::math::fill(y_rep, std::numeric_limits<int>::min());
            current_statement_begin__ = 46;
            validate_non_negative_index("y_pop_rep", "N", N);
            vector<int> y_pop_rep(N, 0);
            stan::math::fill(y_pop_rep, std::numeric_limits<int>::min());
            current_statement_begin__ = 48;
            double min_y_rep(0.0);
            (void) min_y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(min_y_rep, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(min_y_rep,DUMMY_VAR__);
            current_statement_begin__ = 49;
            double max_y_rep(0.0);
            (void) max_y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(max_y_rep, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(max_y_rep,DUMMY_VAR__);
            current_statement_begin__ = 50;
            double mean_y_rep(0.0);
            (void) mean_y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(mean_y_rep, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(mean_y_rep,DUMMY_VAR__);
            current_statement_begin__ = 51;
            double sd_y_rep(0.0);
            (void) sd_y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(sd_y_rep, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sd_y_rep,DUMMY_VAR__);
            current_statement_begin__ = 53;
            int p_min(0);
            (void) p_min;  // dummy to suppress unused var warning

            stan::math::fill(p_min, std::numeric_limits<int>::min());
            current_statement_begin__ = 54;
            int p_max(0);
            (void) p_max;  // dummy to suppress unused var warning

            stan::math::fill(p_max, std::numeric_limits<int>::min());
            current_statement_begin__ = 55;
            int p_mean(0);
            (void) p_mean;  // dummy to suppress unused var warning

            stan::math::fill(p_mean, std::numeric_limits<int>::min());
            current_statement_begin__ = 56;
            int p_sd(0);
            (void) p_sd;  // dummy to suppress unused var warning

            stan::math::fill(p_sd, std::numeric_limits<int>::min());


            current_statement_begin__ = 58;
            stan::math::assign(theta, inv_logit(add(mu,multiply(sigma,alpha_std))));
            current_statement_begin__ = 60;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 61;
                stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), binomial_logit_log(get_base1(y,n,"y",1),get_base1(K,n,"K",1),add(mu,multiply(sigma,alpha_std))));
            }
            current_statement_begin__ = 63;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 64;
                stan::math::assign(get_base1_lhs(y_rep,n,"y_rep",1), binomial_rng(get_base1(K,n,"K",1),get_base1(theta,n,"theta",1), base_rng__));
            }
            current_statement_begin__ = 66;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 67;
                stan::math::assign(get_base1_lhs(y_pop_rep,n,"y_pop_rep",1), binomial_rng(get_base1(K,n,"K",1),inv_logit(normal_rng(mu,sigma, base_rng__)), base_rng__));
            }
            current_statement_begin__ = 69;
            stan::math::assign(min_y_rep, min(y_rep));
            current_statement_begin__ = 70;
            stan::math::assign(max_y_rep, max(y_rep));
            current_statement_begin__ = 71;
            stan::math::assign(mean_y_rep, mean(to_vector(y_rep)));
            current_statement_begin__ = 72;
            stan::math::assign(sd_y_rep, sd(to_vector(y_rep)));
            current_statement_begin__ = 74;
            stan::math::assign(p_min, logical_gte(min_y_rep,min_y));
            current_statement_begin__ = 75;
            stan::math::assign(p_max, logical_gte(max_y_rep,max_y));
            current_statement_begin__ = 76;
            stan::math::assign(p_mean, logical_gte(mean_y_rep,mean_y));
            current_statement_begin__ = 77;
            stan::math::assign(p_sd, logical_gte(sd_y_rep,sd_y));

            // validate generated quantities
            current_statement_begin__ = 42;
            current_statement_begin__ = 43;
            current_statement_begin__ = 45;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y_rep[k0__]",y_rep[k0__],0);
            }
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y_pop_rep[k0__]",y_pop_rep[k0__],0);
            }
            current_statement_begin__ = 48;
            check_greater_or_equal(function__,"min_y_rep",min_y_rep,0);
            current_statement_begin__ = 49;
            check_greater_or_equal(function__,"max_y_rep",max_y_rep,0);
            current_statement_begin__ = 50;
            check_greater_or_equal(function__,"mean_y_rep",mean_y_rep,0);
            current_statement_begin__ = 51;
            check_greater_or_equal(function__,"sd_y_rep",sd_y_rep,0);
            current_statement_begin__ = 53;
            check_greater_or_equal(function__,"p_min",p_min,0);
            check_less_or_equal(function__,"p_min",p_min,1);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__,"p_max",p_max,0);
            check_less_or_equal(function__,"p_max",p_max,1);
            current_statement_begin__ = 55;
            check_greater_or_equal(function__,"p_mean",p_mean,0);
            check_less_or_equal(function__,"p_mean",p_mean,1);
            current_statement_begin__ = 56;
            check_greater_or_equal(function__,"p_sd",p_sd,0);
            check_less_or_equal(function__,"p_sd",p_sd,1);

            // write generated quantities
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_rep[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_pop_rep[k_0__]);
            }
        vars__.push_back(min_y_rep);
        vars__.push_back(max_y_rep);
        vars__.push_back(mean_y_rep);
        vars__.push_back(sd_y_rep);
        vars__.push_back(p_min);
        vars__.push_back(p_max);
        vars__.push_back(p_mean);
        vars__.push_back(p_sd);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_bayes_estimator_binomial";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_std" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pop_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "min_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "max_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_min";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sd";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_std" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pop_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "min_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "max_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_y_rep";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_min";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_max";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sd";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_bayes_estimator_binomial_namespace::model_bayes_estimator_binomial stan_model;


#endif
